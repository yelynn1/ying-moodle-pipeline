{"version":3,"sources":["../src/drawers.js"],"names":["backdropPromise","drawerMap","Map","sizes","medium","large","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","browserWidth","isLarge","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","drawerNode","classList","contains","openDrawer","dataset","forceopen","Aria","hide","set","eventname","cancelable","drawerInstance","showEvent","dispatchEvent","eventTypes","drawerShow","defaultPrevented","unhide","add","preference","M","util","set_user_preference","state","page","getElementById","backdrop","show","pageWrapper","style","overflow","closeButton","querySelector","focus","drawerShown","hideEvent","drawerHide","remove","drawerHidden","closeDrawer","parseInt","closeOnResize","has","forEach","comparisonInstance","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","focusLastUsedToggle","lastUsedButton","scroller","drawerLayout","scrollTop","window","innerHeight","registerListeners","closest","targetDrawer","getDrawerInstanceForNode","toggleVisibility","openDrawerButton","closeDrawerButton","closeOtherDrawers","detail","closeOnResizeListener","anyOpen","isOpen","drawers"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n    medium: 991,\n    large: 1400\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n    const DomRect = document.body.getBoundingClientRect();\n    return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    constructor(drawerNode) {\n        this.drawerNode = drawerNode;\n\n        if (this.drawerNode.classList.contains('show')) {\n            this.openDrawer();\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer();\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        drawerMap.set(drawerNode, this);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains('show');\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     */\n    openDrawer() {\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add('show');\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            M.util.set_user_preference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page-wrapper');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        const closeButton = this.drawerNode.querySelector('[data-toggle=\"drawers\"][data-action=\"closedrawer\"]');\n        closeButton.focus();\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     */\n    closeDrawer() {\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference) {\n            M.util.set_user_preference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove('show');\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page-wrapper');\n                pageWrapper.style.overflow = 'auto';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains('show')) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n    const body = document.querySelector('body');\n    const drawerLayout = document.querySelector('#page.drawers');\n    drawerLayout.addEventListener(\"scroll\", () => {\n        if (drawerLayout.scrollTop >= window.innerHeight) {\n            body.classList.add('scrolled');\n        } else {\n            body.classList.remove('scrolled');\n        }\n    });\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll('[data-toggle=\"drawers\"][data-target=\"' + toggleButton.dataset.target + '\"]')\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector('[data-toggle=\"drawers\"][data-target=\"' + target + '\"][data-lastused=\"true\"');\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest('[data-toggle=\"drawers\"][data-action=\"toggle\"]');\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest('[data-toggle=\"drawers\"][data-action=\"opendrawer\"]');\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest('[data-toggle=\"drawers\"][data-action=\"closedrawer\"]');\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll('[data-region=\"fixed-drawer\"]');\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"file":"drawers.min.js"}